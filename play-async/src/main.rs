//! play async rust
//! https://rust-lang.github.io/async-book/
//! 异步：能够在同一线程上并发地执行多个任务。
//! 
//! 多线程也能并发执行多个任务，为什么还要异步机制？
//! 多线程的缺点：
//!   1. 操作系统在线程间切换会导致一定开销；
//!   2. 线程间共享数据的问题；
//! 异步的作用就在于要解决多线程存在的问题。
//! 异步相比多线程可能具备更快以及更少的资源消耗的优势。
//! 
//! 异步机制有什么缺点吗？
//! 线程是操作系统原生支持的机制。任何函数都基本可以直接创建和使用线程。
//! 而异步机制则需要语言或者库提供对异步函数的支持。例如Rust中，`async fn`用
//! 于创建异步函数，该函数返回一个`Future`对象。而要执行异步函数的函数体，则
//! 需要运行`Future`的任务并等待其完成。
//! 
//! 传统的多线程机制实际上十分高效了。Rust的内存占用小以及可预见性使得使用多线程编程
//! 是你基本可以避免使用异步编程方式。而且使用异步编程会使得代码复杂性变高，在打算使用
//! 之前要认真衡量使用异步编程模式的代价是否值得。

fn main() {
    println!("Hello, world!");
}

async tasks() {
    // 创建两个异步任务
    let future_one = some_async_task("");
    let future_two - some_async_task2("");

    // 运行并等待异步任务完成
    join!(future_one,future_two);
}
